import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, a as space, t as text, c as claim_element, b as children, g as detach_dev, h as claim_space, f as claim_text, j as attr_dev, l as add_location, m as insert_dev, o as append_dev, B as set_data_dev, n as noop, L as destroy_each, q as create_component, D as query_selector_all, r as claim_component, u as mount_component, x as transition_in, y as transition_out, z as destroy_component } from './index.e8a31daa.js';

/* src/components/Blog/BlogCard.svelte generated by Svelte v3.18.0 */

const file = "src/components/Blog/BlogCard.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

// (14:4) {#each posts as post, index}
function create_each_block(ctx) {
	let div3;
	let a;
	let div1;
	let div0;
	let img;
	let img_src_value;
	let a_href_value;
	let t0;
	let div2;
	let h4;
	let t1_value = /*post*/ ctx[1].title + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div3 = element("div");
			a = element("a");
			div1 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div2 = element("div");
			h4 = element("h4");
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			a = claim_element(div3_nodes, "A", { href: true });
			var a_nodes = children(a);
			div1 = claim_element(a_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true });
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t0 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			h4 = claim_element(div2_nodes, "H4", {});
			var h4_nodes = children(h4);
			t1 = claim_text(h4_nodes, t1_value);
			h4_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*post*/ ctx[1].pic)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Blog Picture");
			add_location(img, file, 18, 24, 498);
			attr_dev(div0, "class", "Card-Picture-Overlay");
			add_location(div0, file, 17, 20, 439);
			attr_dev(div1, "class", "Card-Picture");
			add_location(div1, file, 16, 16, 392);
			attr_dev(a, "href", a_href_value = "blog/" + /*post*/ ctx[1].fields.slug);
			add_location(a, file, 15, 12, 341);
			add_location(h4, file, 24, 16, 713);
			attr_dev(div2, "class", "Card-Title");
			add_location(div2, file, 23, 12, 672);
			attr_dev(div3, "class", "Card svelte-1fm9esz");
			add_location(div3, file, 14, 8, 310);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, a);
			append_dev(a, div1);
			append_dev(div1, div0);
			append_dev(div0, img);
			append_dev(div3, t0);
			append_dev(div3, div2);
			append_dev(div2, h4);
			append_dev(h4, t1);
			append_dev(div3, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 1 && img.src !== (img_src_value = /*post*/ ctx[1].pic)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*posts*/ 1 && a_href_value !== (a_href_value = "blog/" + /*post*/ ctx[1].fields.slug)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*posts*/ 1 && t1_value !== (t1_value = /*post*/ ctx[1].title + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(14:4) {#each posts as post, index}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let each_value = /*posts*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "Blog-Cards svelte-1fm9esz");
			add_location(div, file, 12, 0, 244);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts*/ 1) {
				each_value = /*posts*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { posts } = $$props;
	const writable_props = ["posts"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<BlogCard> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	$$self.$capture_state = () => {
		return { posts };
	};

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	return [posts];
}

class BlogCard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BlogCard",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*posts*/ ctx[0] === undefined && !("posts" in props)) {
			console.warn("<BlogCard> was created without expected prop 'posts'");
		}
	}

	get posts() {
		throw new Error("<BlogCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<BlogCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/blog/index.svelte generated by Svelte v3.18.0 */
const file$1 = "src/routes/blog/index.svelte";

function create_fragment$1(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let current;

	const blogcards = new BlogCard({
			props: { posts: /*posts*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Recent posts");
			t2 = space();
			create_component(blogcards.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-hfp9t8\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Recent posts");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(blogcards.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Blog";
			add_location(h1, file$1, 23, 0, 292);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			mount_component(blogcards, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blogcards_changes = {};
			if (dirty & /*posts*/ 1) blogcards_changes.posts = /*posts*/ ctx[0];
			blogcards.$set(blogcards_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blogcards.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blogcards.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			destroy_component(blogcards, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload({ params, query }) {
	return { posts };
}

function instance$1($$self, $$props, $$invalidate) {
	let { posts } = $$props;
	const writable_props = ["posts"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Blog> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	$$self.$capture_state = () => {
		return { posts };
	};

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	return [posts];
}

class Blog extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { posts: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Blog",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*posts*/ ctx[0] === undefined && !("posts" in props)) {
			console.warn("<Blog> was created without expected prop 'posts'");
		}
	}

	get posts() {
		throw new Error("<Blog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<Blog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Blog;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNjRiMDIwOGEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Jsb2cvQmxvZ0NhcmQuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9ibG9nL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICAgIGV4cG9ydCBsZXQgcG9zdHNcbjwvc2NyaXB0PlxuXG48c3R5bGUgdHlwZT1cInRleHQvc2Nzc1wiPlxuICAgIC5CbG9nLUNhcmRzIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyMCUgMjAlIDIwJSAyMCUgMjAlO1xuICAgICAgICAuQ2FyZCB7XG4gICAgICAgICAgICBtYXJnaW46IDEwcHg7XG4gICAgICAgICAgICAuQ2FyZC1QaWN0dXJlIHtcbiAgICAgICAgICAgICAgICAuQ2FyZC1QaWN0dXJlLU92ZXJsYXkge1xuICAgICAgICAgICAgICAgICAgICBpbWcge1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcCB7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5DYXJkLXRpdGxlIHtcbiAgICAgICAgICAgICAgICBoNCB7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG48L3N0eWxlPlxuXG48ZGl2IGNsYXNzPVwiQmxvZy1DYXJkc1wiPlxuICAgIHsjZWFjaCBwb3N0cyBhcyBwb3N0LCBpbmRleH1cbiAgICAgICAgPGRpdiBjbGFzcz1cIkNhcmRcIj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCJibG9nL3twb3N0LmZpZWxkcy5zbHVnfVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJDYXJkLVBpY3R1cmVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIkNhcmQtUGljdHVyZS1PdmVybGF5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cG9zdC5waWN9IGFsdD1cIkJsb2cgUGljdHVyZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLXA+e3Bvc3QuZGVzY3JpcHRpb259PC9wLS0+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIkNhcmQtVGl0bGVcIj5cbiAgICAgICAgICAgICAgICA8aDQ+e3Bvc3QudGl0bGV9PC9oND5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICB7L2VhY2h9XG48L2Rpdj4iLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cblxuXHRleHBvcnQgZnVuY3Rpb24gcHJlbG9hZCh7IHBhcmFtcywgcXVlcnkgfSkge1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHBvc3RzOiBwb3N0c1xuXHRcdH1cblx0fVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgcG9zdHM7XG5cdGltcG9ydCBCbG9nQ2FyZHMgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CbG9nL0Jsb2dDYXJkLnN2ZWx0ZSdcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdFxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+QmxvZzwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48aDE+UmVjZW50IHBvc3RzPC9oMT5cblxuPEJsb2dDYXJkcyBwb3N0cz17cG9zdHN9IC8+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBd0JxQixHQUFJLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkNBTkcsR0FBSSxJQUFDLEdBQUc7Ozs7Ozs7eURBSGYsR0FBSSxJQUFDLE1BQU0sQ0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0VBR1QsR0FBSSxJQUFDLEdBQUc7Ozs7a0ZBSGYsR0FBSSxJQUFDLE1BQU0sQ0FBQyxJQUFJOzs7O2dFQVN0QixHQUFJLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBWHBCLEdBQUs7OztnQ0FBVixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFBQyxHQUFLOzs7K0JBQVYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQVpLLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQ0NILE9BQU8sR0FBRyxNQUFNLEVBQUUsS0FBSztVQUc5QixLQUFLOzs7O09BSkgsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
